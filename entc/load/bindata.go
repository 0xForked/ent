// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package load

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\x41\x8b\xdb\x30\x10\x85\xcf\x9a\x5f\x31\x15\x29\x2b\x81\x57\x4b\xaf\x0b\x39\x35\x39\xb4\xd0\xdd\x42\x16\x7a\x48\xc3\x22\xc7\xe3\xac\xa8\x2d\xbb\x92\x52\xba\x08\xfd\xf7\x22\xc9\x0e\xf4\x94\x8c\xe6\xe9\x7b\x6f\xc6\x8a\x11\x3b\xea\x8d\x25\xe4\xa3\x36\x96\x63\x4a\xf0\xf0\x80\x9f\xa7\x8e\xf0\x42\x96\x9c\x0e\xd4\x61\xfb\x8e\x77\x64\xc3\xf9\x76\x74\xa7\x70\xf7\x8c\x4f\xcf\x2f\xb8\xdf\x7d\x79\x51\x30\xeb\xf3\x2f\x7d\x21\xcc\x0c\x00\x33\xce\x93\x0b\x28\x80\xf1\xc9\x73\x60\xbc\x7d\x0f\x94\xff\xc4\x88\x81\xc6\x79\xd0\x81\x90\x57\x95\x2f\x96\xa5\x35\x3b\x63\x43\x8f\xfc\xe3\x6f\x8e\xea\xfb\x42\x4c\x09\x24\x40\x8c\xb8\x69\xb5\x27\x7c\xdc\x62\xf9\x5d\xfb\xf9\xee\x1f\xed\xd0\x9f\xdf\x68\xd4\x1e\xb7\x78\x3c\x91\x0d\xea\x50\xea\x58\xb8\x4e\xdb\x0b\xe1\xe6\xb5\xc1\x8d\xd5\x63\x61\xa8\x27\x3d\x92\xcf\x70\xc6\x62\xbc\x5f\xe0\x29\xa9\x5c\xdc\x72\xf8\x58\x31\x8f\x98\x91\x3b\xea\xf5\x75\x08\xf5\x28\xf1\x05\x96\x52\x53\x4c\xc8\x76\x78\x9f\x12\x24\x80\xfe\x6a\xcf\x65\x13\x42\x62\x04\x96\xe3\x0d\xc6\x92\xc7\xe3\xe9\x78\xca\xab\x00\xd6\x4f\x0e\x5f\x9b\x25\x75\x0e\x54\x33\xae\x53\x44\x60\xac\x6d\x90\x9c\xcb\xbd\x6f\xda\xf9\x37\x3d\x54\x63\x51\x35\x12\x18\x33\x7d\x51\x7c\xd8\xa2\x35\x43\xb9\xc3\x7a\x6d\x06\x41\xce\xe5\x76\x9e\xad\xfa\x6e\x51\xcf\x33\xd9\x4e\x94\xb2\xc1\x56\x42\xee\x4e\x5e\x1d\x42\x37\x5d\x83\xfa\xe1\x4c\x20\x51\xbe\x92\xfa\x3a\x19\xbb\x0a\x6b\x5c\xc1\x7f\x5a\x2e\xa5\xbc\xcd\xb6\xba\x64\xfb\xc9\x95\x21\x2b\x8b\x9c\xab\xac\x43\x70\xc6\x5e\xb2\x46\xed\xb3\x46\x48\x59\x34\xfb\xbf\x26\x88\x4f\x85\xf4\xdf\x5b\xa8\x43\xd5\xa7\xb0\x2c\x33\x25\xf8\x17\x00\x00\xff\xff\x0b\x99\x2b\x2f\x9d\x02\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 669, mode: os.FileMode(420), modTime: time.Unix(1564567133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x51\x6f\xdb\x36\x10\x7e\x16\x7f\xc5\xcd\x0f\x81\x14\x18\xca\xbb\x0a\x3f\x0c\x5b\x87\x75\xc3\x92\xa1\xd9\xf6\x52\x14\x2d\x2d\x1d\x1d\xb6\x32\xe5\x92\x54\x8b\x34\xf0\x7f\x1f\xee\x78\xb4\x25\xdb\x4d\x81\xe6\x25\xe4\x7d\xdf\xdd\xf1\xee\x3e\x91\xde\xe9\xf6\xa3\xde\x20\xf4\x83\xee\x94\xb2\xdb\xdd\xe0\x23\x94\xaa\x58\xa0\x6b\x87\xce\xba\xcd\xcd\x87\x30\xb8\x85\x2a\x16\x1e\x4d\x8f\x6d\x5c\x28\x55\x2c\xcc\xba\xbd\x41\x17\x17\xc7\xe5\x8d\xb1\xd8\x77\x0b\x55\x29\x75\x73\x03\xf7\xed\x03\x6e\x35\x78\xdc\x79\x0c\xe8\x62\x00\xed\x00\x5d\xac\x05\x88\x0f\x3a\xc2\x17\x1d\x38\x2d\x76\x60\xfc\xb0\x05\x0d\xed\xb0\xdd\xf5\x16\x3b\x18\x03\x7a\x90\xa3\xd5\x2a\x3e\xee\x30\x87\x0c\xd1\x8f\x6d\x84\x27\x55\xdc\xea\x2d\x02\x90\xc1\xba\x0d\x00\xbc\xa7\x83\x36\x0b\xa7\xb7\xb8\x1c\xb6\x36\xe2\x76\x17\x1f\x17\xef\x55\xf1\xb2\xdb\x60\x00\x78\xf3\xf6\x9a\x56\x07\x22\x92\x79\xce\xfc\x8d\x6a\x08\xc4\xe4\x55\x66\x72\x69\x73\xea\x9e\xcb\x4c\xac\xf3\x2a\x93\xfd\x07\x8a\x4c\x8e\x67\x35\xc2\xb4\xce\x67\x2a\xfd\x87\x62\xa4\x3f\x3e\x73\xcd\x06\xa1\x53\x82\x13\xba\xde\xc0\x37\xa3\x47\xbd\x99\xb3\xef\xed\xd7\x1c\xfc\xda\xba\x28\x4b\x61\x07\xfb\xf5\x24\xf8\x2f\x0f\xda\x07\x64\xda\xf5\x31\xba\xd0\xdb\x04\xce\x3d\xfe\x75\xf6\xd3\x98\x52\xac\x87\xa1\x9f\x27\x18\x19\x9c\x3b\xdc\x8e\x7d\xaf\xd7\x3d\x5e\x74\x70\x02\xce\x5d\xee\x76\xd1\x0e\x4e\xf7\x17\x5d\x06\x01\xe7\x2e\xbf\xa2\xd1\x63\x1f\x2f\x1f\xab\x4b\xe0\xdc\xe3\x3f\xdd\xdb\x4e\xc7\xc1\x07\x38\x36\x2a\x7b\x7c\x3e\x80\x17\x04\xc5\x02\x3d\xd7\x13\x9b\x7f\x40\x4e\xec\x77\x41\x4d\x32\x8f\xef\xeb\x68\x4e\x7c\x46\x41\x27\xc4\x53\xed\xbc\x46\x93\x92\xcf\x79\x1e\xcd\xbb\xf3\xec\xaf\xd1\x88\xcc\x66\xdf\xab\x47\xf3\x0d\xbd\xc8\x58\x9e\x51\xca\x2b\xf7\x19\x7d\xc0\x53\xaa\x4d\xe6\xd3\xf4\x9f\x46\xeb\xb1\x3b\xe1\x7a\x31\x5f\x98\xda\x2d\x7e\xe1\x93\xb6\x1e\x75\x44\x9e\x9a\xcc\x88\xee\x98\x34\xa8\x90\xae\x2f\xeb\x22\x7a\xa3\x5b\xac\x95\x19\x5d\x9b\x5d\x4b\x3c\xcc\xb9\x92\xb2\x9f\x54\xe1\x10\x9a\x15\x5c\xd1\xf6\x49\x15\x3c\xbe\x86\x1b\x83\x35\xad\xcb\x6a\xa9\x0a\x9e\x55\xb6\xd2\x5a\xac\x7a\x93\x8c\x64\xd5\x9b\x64\x94\x29\x34\x64\x94\x75\x02\x52\x27\x1b\x66\xbf\x0a\x69\x97\x10\x69\x5c\x93\x10\xd9\xe5\x68\xa9\x21\x0d\x43\x79\xc7\xd8\x5e\x15\xd6\x00\x9f\x1e\xeb\x9f\x43\x18\xda\xb2\x7a\x01\x08\x3f\xad\xc0\xd9\x9e\x4a\x2b\x1c\x1f\x01\x56\xc7\x0e\x54\xec\xe7\x31\x8e\xde\x81\x43\xe9\xed\x5f\xda\x87\x07\xdd\xcb\xed\xcf\x8f\x12\x7d\x0a\x38\x7d\x4d\x0e\x4d\xa5\xd5\x00\x1a\xfe\xb8\xbf\xbb\x25\x67\xfe\x64\x5a\xed\x60\x8d\xd0\x21\xb9\x76\x89\x42\x01\xc4\x79\x58\x7f\xc0\x36\xca\x3f\x99\xca\x2c\x69\x19\x72\xee\x9c\xb0\x82\xf2\xcd\xdb\xf5\x63\xc4\x25\xa0\xf7\x83\xaf\xa8\xa2\xc0\xb3\x4a\x84\xa7\xd4\x66\xeb\x3a\xeb\xb1\x8d\xa5\x3c\x9d\x3c\x9f\x3b\x23\x01\xab\x4a\xa6\xb8\x57\x85\x19\x3c\xbc\x5b\x82\xa1\x18\x5e\x3b\xfa\x6a\x99\x93\x5e\x92\x50\x72\x86\x22\x30\x7e\xc5\x36\xda\x4f\x14\x01\x60\x26\x9a\x98\x88\x82\x80\xa3\x2c\x26\xba\x60\x20\x2b\x63\xa2\x00\xb2\xcf\x35\x70\xb8\x67\x1b\x01\xf3\x5e\xe0\x7c\xa7\x66\x38\xef\x05\x96\xfb\xb3\x49\xa1\x7f\xd7\x41\x0c\x02\x1f\x2f\xcb\x06\x7a\x74\xa5\xa9\x8f\x96\xb2\x62\xce\x5e\x15\xa4\xa7\xb0\x84\xe1\x23\x75\xc0\xd4\x65\x7a\xde\xe8\x49\xf2\xd5\x0b\x32\x73\x3f\xe8\x15\x22\x42\x60\xa4\xac\xd8\x66\x78\x03\x2b\xb8\x22\xf8\x18\xae\x3d\x0b\x27\x4f\xd6\x2c\xa4\xbc\x54\xc4\x6b\x33\xe1\x10\x38\xbf\x71\x2b\xb8\x12\x9e\x84\x0f\x32\x38\x58\x81\xde\xed\xd0\x75\x65\xb6\x2c\x21\x98\xa4\x74\x99\x39\x9e\xcd\x9c\x7f\xaf\xe4\x91\xa7\xdd\x34\x0e\x1b\x96\x93\xef\x66\xf6\xe1\xd0\x65\x55\x8b\x7e\xcb\x50\xd1\x57\xc4\x92\x3e\x68\x31\xc2\x54\x8d\xd5\x6c\x47\x29\xe9\x58\xb1\xfe\xd3\xba\xae\xac\x60\xb5\x3a\xe0\x7f\x47\xcf\x27\xa2\x6a\x63\xfd\xb2\xc7\x6d\x39\x4b\x1c\xd5\x5e\xfd\x1f\x00\x00\xff\xff\x3e\x7d\x4d\xef\x4d\x0a\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 2637, mode: os.FileMode(420), modTime: time.Unix(1564657397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
